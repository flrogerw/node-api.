{
  "name": "node-rules",
  "version": "3.0.3",
  "description": "Business Rules Engine for JavaScript",
  "keywords": [
    "bre",
    "rules",
    "engine",
    "rule engine"
  ],
  "author": {
    "name": "Mithun Satheesh",
    "email": "mithunsatish@gmail.com"
  },
  "contributors": [
    {
      "name": "Abdul Munim Kazia",
      "email": "munim2020@gmail.com",
      "url": "http://munimkazia.com"
    },
    {
      "name": "ramanaveli2i",
      "url": "https://github.com/ramanaveli2i"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/mithunsatheesh/node-rules"
  },
  "dependencies": {
    "underscore": ">= 1.7"
  },
  "devDependencies": {
    "mocha": "1.6.0",
    "chai": "*",
    "colors": "1.0.3"
  },
  "main": "index.js",
  "engines": {
    "node": ">= 0.4.x"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "readmeFilename": "README.md",
  "readme": "[![Build Status](https://api.travis-ci.org/mithunsatheesh/node-rules.svg?branch=master)](https://travis-ci.org/mithunsatheesh/node-rules)\n[![npm](https://img.shields.io/npm/l/express.svg?style=flat-square)]()\n[![npm version](https://badge.fury.io/js/node-rules.svg)](http://badge.fury.io/js/node-rules)\n\nNode Rules\n=====\n\nNode-rules is a light weight forward chaining Rule Engine, written on node.js.\n\n\n\n#### Installation\n\ninstall node-rules via npm\n\n    npm install node-rules\n    \n>*We have improved the API in the 3.x.x version, if you were using the v2.x.x, please find the relevant docs and code base [here](https://github.com/mithunsatheesh/node-rules/tree/v2.2.3). To migrate to 3.0.0 please  read [the wiki here](https://github.com/mithunsatheesh/node-rules/wiki)!*\n\n![Sample Screencast](https://raw.githubusercontent.com/mithunsatheesh/node-rules/gh-pages/images/screencast.gif \"See it in action\")\n\n#### Overview\n\nNode-rules takes rules written in JSON friendly format as input. Once the rule engine is running with rules registered on it, you can feed it facts and the rules will be applied one by one to generate an outcome.\n\n###### 1. Defining a Rule\n\nA rule will consist of a condition and its corresponding consequence. You can find the explanation for various mandatory and optional parameters of a rule in [this wiki](https://github.com/mithunsatheesh/node-rules/wiki/Rules).\n\n    {\n\t\t\"condition\" : function(R) {\n\t\t\tR.when(this.transactionTotal < 500);\n\t\t},\n\t\t\"consequence\" : function(R) {\n\t\t\tthis.result = false;\n\t\t\tR.stop();\n\t\t},\n\t\t\"priority\" : 4\n\t}\n\nHere priority is an optional parameter which will be used to specify priority of a rule over other rules when there are multiple rules running. In the above rule `R.when` evaluates the condition expression and `R.stop` used to stop further processing of the fact as we have arrived at a result. \n\nThe functions `R.stop`, `R.when`, `R.next`, `R.restart` are part of the Flow Control API which allows user to control the Engine Flow. Read more about  [Flow Controls](https://github.com/mithunsatheesh/node-rules/wiki/Flow-Control-API) in [wiki](https://github.com/mithunsatheesh/node-rules/wiki).\n\n\n###### 2. Defining a Fact\nFacts are those input json values on which the rule engine applies its rule to obtain results. A fact can have multiple attributes as you decide.\n\nA sample Fact may look like\n\n\t{\n\t  \"name\":\"user4\",\n\t  \"application\":\"MOB2\",\n\t  \"transactionTotal\":400,\n\t  \"cardType\":\"Credit Card\",\n    }\n\n###### 3. Using the Rule Engine\n\nThe example below shows how to use the rule engine to apply a sample rule on a specific fact. Rules can be fed into the rule engine as Array of rules or as an individual rule object.\n\t\n``` js\nvar RuleEngine = require('node-rules');\n\n//define the rules\nvar rules = [{\n\t\"condition\": function(R) {\n\t\tR.when(this && (this.transactionTotal < 500));\n\t},\n\t\"consequence\": function(R) {\n\t\tthis.result = false;\n\t\tR.stop();\n\t}\n}];\n\n//sample fact to run the rules on\t\nvar fact = {\n    \"name\":\"user4\",\n    \"application\":\"MOB2\",\n    \"transactionTotal\":400,\n    \"cardType\":\"Credit Card\",\n};\n\n//initialize the rule engine\nvar R = new RuleEngine(rules);\n\n//Now pass the fact on to the rule engine for results\nR.execute(fact,function(result){ \n\n\tif(result.result) \n\t\tconsole.log(\"Payment Accepted\"); \n\telse \n\t\tconsole.log(\"Payment Rejected\");\n\t\n});\n```\n\n###### 4. Controlling Rules running on the Rule Engine\nIf you are looking for ways to specify the order in which the rules get applied on a fact, it can be done via using the `priority` parameter. Read more about it in the [Rule wiki](https://github.com/mithunsatheesh/node-rules/wiki/Rules). If you need to know about how to change priority of rules or remove add new rules to a Running Rule Engine, you may read more about it in [Dynamic Control Wiki](https://github.com/mithunsatheesh/node-rules/wiki/Dynamic-Control).\n\n###### 5. Exporting Rules to an external storage\nTo read more about storing rules running on the engine to an external DB, refer this [wiki article](https://github.com/mithunsatheesh/node-rules/wiki/Exporting-and-Importing-Rules). \n\n\n#### Wiki\nTo read more about the Rule engine functions, please read [the wiki here](https://github.com/mithunsatheesh/node-rules/wiki)!. To find more examples of implementation please look in the [examples](https://github.com/mithunsatheesh/node-rules/tree/master/examples) folder.\n\n#### Issues\nGot issues with the implementation?. Feel free to open an issue [here](https://github.com/mithunsatheesh/node-rules/issues/new).\n\n#### Licence\nNode rules is distributed under the MIT License.\n\n\n#### Credits\nThe JSON friendly rule formats used in version 2.x.x of this module were initially based on the node module [jools](https://github.com/tdegrunt/jools).\nThe screencast image shown in this page is taken from [nmotv.in](http://nmotw.in/node-rules/) which has a pretty nice article on how to use this module!\n",
  "bugs": {
    "url": "https://github.com/mithunsatheesh/node-rules/issues"
  },
  "_id": "node-rules@3.0.3",
  "dist": {
    "shasum": "d3cb9ab2f9756ce2fa60ee266cbcd406bcfedb31"
  },
  "_from": "node-rules@",
  "_resolved": "https://registry.npmjs.org/node-rules/-/node-rules-3.0.3.tgz"
}
